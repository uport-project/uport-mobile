
buildscript {
    // repositories {
    //     maven { url 'https://maven.fabric.io/public' }
    //     maven {
    //         url "http://dl.bintray.com/kunickiaj/maven"
    //     }
    // }

    dependencies {
        // These docs use an open ended version so that our plugin
        // can be updated quickly in response to Android tooling updates

        // We recommend changing it to the latest version from our changelog:
        //
        // classpath "io.fabric.tools:gradle:$fabric_tools_version"
        
    }
}

plugins {
    id "io.errorlab.gradle.vault" version "0.1.0"
}

apply plugin: "com.android.application"
/*
 * Copyright (C) 2018 ConsenSys AG
 *
 * This file is part of uPort Mobile App.
 *
 * uPort Mobile App is free software: you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * uPort Mobile App is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with uPort Mobile App.
 * If not, see <http://www.gnu.org/licenses/>.
 *
 */

// Put Fabric plugin after Android plugin
// apply plugin: 'io.fabric'


// repositories {
//     maven { url 'https://maven.fabric.io/public' }
// }

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js",
    // the name of the generated asset file containing your JS bundle
    bundleAssetName: "index.android.bundle",
    inputExcludes: ["android/**", "ios/**", 'fastlane/**', 'build/**'],
    extraPackagerArgs: ["--max-workers=1"],
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);


// is gradle started for release build?
// this is not bullet proof since there may exist some tasks that call for release but are not explicitly run
boolean releaseRequested = false
gradle.startParameter.taskNames.each {
    if (it.toLowerCase() ==~ /.*(release|deliver|build|signingreport).*/) {
        releaseRequested = true
    }
}


apply from: "../version.gradle"
apply from: "../signing.gradle"

android {
    compileSdkVersion compile_sdk_version

    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst "lib/x86_64/libc++_shared.so"
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            assets.srcDirs = ["src/main/assets", "build/jsbundle/assets"]
            res.srcDirs = ["src/main/res", "build/jsbundle/res" ]
        }
    }

    defaultConfig {
        applicationId "com.uportMobile"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode = getBuildVersionCode()
        versionName = "1.6.${versionCode}"

        multiDexEnabled true
        multiDexKeepFile file('multidex-config.txt')

        missingDimensionStrategy 'react-native-camera', 'general'
        missingDimensionStrategy "RNN.reactNativeVersion", "reactNative60"

    }


    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        release {
            if (releaseRequested) {
                storeFile getReleaseKeystore()
                storePassword getReleaseKeystorePassword()
                keyAlias getReleaseKeyAlias()
                keyPassword getReleaseKeyPassword()
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [excludeSystemAlertWindowPermission: "false"]
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
        }
        release {
            manifestPlaceholders = [excludeSystemAlertWindowPermission: "true"]
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            if (releaseRequested) {
                signingConfig signingConfigs.release
            }
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        if (variant.name.toLowerCase().contains("debug")) {
            variant.outputs.each {
                it.versionCodeOverride = 42
            }
        } else {
            variant.outputs.each { output ->
                // For each separate APK per architecture, set a unique version code as described here:
                // https://developer.android.com/studio/build/configure-apk-splits.html
                def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
                def abi = output.getFilter(OutputFile.ABI)
                if (abi != null) {  // null for the universal-debug, universal-release variants
                    output.versionCodeOverride =
                            //there need to be 10 million uport releases until numbers start to overlap
                            versionCodes.get(abi) * 10000000 + defaultConfig.versionCode
                }
            }
        }
    }

    lintOptions {
        //android gradle plugin is erroneously complaining about some dependency version mismatch
        disable 'GradleCompatible'
        disable 'RestrictedApi'
    }

    
}

configurations.all {

    resolutionStrategy {
        force(
                // "com.google.firebase:firebase-core:$play_services_version",
                // "com.google.firebase:firebase-messaging:$play_services_version",
                // "com.google.android.gms:play-services-gcm:$play_services_version",
                // "com.android.support:support-v4:$support_lib_version",
                // "com.android.support:appcompat-v7:$support_lib_version",
        )
    }
}

dependencies {

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"
    implementation project(':react-native-navigation')

    implementation project(':react-native-firebase')
    implementation "com.google.android.gms:play-services-base:16.1.0"
    implementation "com.google.firebase:firebase-core:16.0.9"

    // implementation("com.crashlytics.sdk.android:crashlytics:$crashlytics_version@aar") {
    //     transitive = true
    // }

    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    implementation "com.amazonaws:aws-android-sdk-core:$aws_lib_version"
    implementation "com.amazonaws:aws-android-sdk-s3:$aws_lib_version"
    implementation "com.amazonaws:aws-android-sdk-ddb:$aws_lib_version"
    implementation "com.amazonaws:aws-android-sdk-cognito:$aws_lib_version"
    implementation "com.amazonaws:aws-android-sdk-cognitoidentityprovider:$aws_lib_version"
    implementation "com.amazonaws:aws-android-sdk-sns:$aws_lib_version"
    

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
    

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}


apply plugin: 'com.google.gms.google-services'
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
